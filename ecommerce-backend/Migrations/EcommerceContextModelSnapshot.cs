// <auto-generated />
using EcommerceApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace EcommerceApi.Migrations
{
    [DbContext(typeof(EcommerceContext))]
    partial class EcommerceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EcommerceApi.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("EmailConfirmed");

                    b.Property<string>("GivenName")
                        .HasColumnName("GivenName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasColumnName("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("PK_Users");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EcommerceApi.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasMaxLength(30);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LastName");

                    b.Property<string>("Phone")
                        .HasColumnName("Phone");

                    b.HasKey("Id")
                        .HasName("PK_Contacts");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("EcommerceApi.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerId");

                    b.Property<string>("Address")
                        .HasColumnName("Address");

                    b.Property<string>("City")
                        .HasColumnName("City");

                    b.Property<string>("CompanyName")
                        .HasColumnName("CompanyName");

                    b.Property<string>("Country")
                        .HasColumnName("Country");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnName("CreditLimit");

                    b.Property<string>("CustomerCode")
                        .HasColumnName("CustomerCode");

                    b.Property<string>("Email")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .HasColumnName("LastName");

                    b.Property<string>("Mobile")
                        .HasColumnName("Mobile");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("PostalCode")
                        .HasColumnName("PostalCode");

                    b.Property<string>("Province")
                        .HasColumnName("Province");

                    b.Property<string>("PstNumber")
                        .HasColumnName("PstNumber");

                    b.Property<string>("Status")
                        .HasColumnName("Status");

                    b.Property<string>("UserName")
                        .HasColumnName("UserName");

                    b.Property<string>("Website")
                        .HasColumnName("Website");

                    b.HasKey("CustomerId")
                        .HasName("PK_Customer");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("EcommerceApi.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LocationId");

                    b.Property<string>("LocationAddress")
                        .HasColumnName("LocationAddress");

                    b.Property<string>("LocationName")
                        .HasColumnName("LocationName");

                    b.HasKey("LocationId")
                        .HasName("PK_Location");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("EcommerceApi.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductId");

                    b.Property<bool>("AllowOutOfStockPurchase")
                        .HasColumnName("AllowOutOfStockPurchase");

                    b.Property<string>("Barcode")
                        .HasColumnName("Barcode");

                    b.Property<bool>("ChargeTaxes")
                        .HasColumnName("ChargeTaxes");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("ProductCode")
                        .HasColumnName("ProductCode");

                    b.Property<string>("ProductDescription")
                        .HasColumnName("ProductDescription");

                    b.Property<string>("ProductName")
                        .HasColumnName("ProductName");

                    b.Property<int>("ProductTypeId")
                        .HasColumnName("ProductTypeId");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnName("PurchasePrice");

                    b.Property<decimal>("SalesPrice")
                        .HasColumnName("SalesPrice");

                    b.Property<string>("Sku")
                        .HasColumnName("Sku");

                    b.HasKey("ProductId")
                        .HasName("PK_Product");

                    b.HasIndex("ProductTypeId")
                        .HasName("IX_Product_ProductTypeId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("EcommerceApi.Models.ProductType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductTypeId");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("ProductTypeName")
                        .HasColumnName("ProductTypeName");

                    b.HasKey("ProductTypeId")
                        .HasName("PK_ProductType");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("PK_Roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("ClaimType");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnName("RoleId");

                    b.HasKey("Id")
                        .HasName("PK_RoleClaims");

                    b.HasIndex("RoleId")
                        .HasName("IX_RoleClaims_RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("ClaimType");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("PK_UserClaims");

                    b.HasIndex("UserId")
                        .HasName("IX_UserClaims_UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("LoginProvider");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("ProviderKey");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("UserId");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("PK_UserLogins");

                    b.HasIndex("UserId")
                        .HasName("IX_UserLogins_UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("UserId");

                    b.Property<string>("RoleId")
                        .HasColumnName("RoleId");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_UserRoles");

                    b.HasIndex("RoleId")
                        .HasName("IX_UserRoles_RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("UserId");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("LoginProvider");

                    b.Property<string>("Name")
                        .HasColumnName("Name");

                    b.Property<string>("Value")
                        .HasColumnName("Value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("PK_UserTokens");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("EcommerceApi.Models.Product", b =>
                {
                    b.HasOne("EcommerceApi.Models.ProductType", "ProductType")
                        .WithMany("Product")
                        .HasForeignKey("ProductTypeId")
                        .HasConstraintName("FK_Product_ProductType_ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RoleClaims_Roles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EcommerceApi.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserClaims_Users_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EcommerceApi.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserLogins_Users_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRoles_Roles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EcommerceApi.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRoles_Users_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EcommerceApi.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserTokens_Users_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
